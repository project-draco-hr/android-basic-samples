{
switch (requestCode) {
case SEND_REQUEST_CODE:
    if (resultCode == GamesActivityResultCodes.RESULT_SEND_REQUEST_FAILED) {
      Toast.makeText(this,"FAILED TO SEND REQUEST!",Toast.LENGTH_LONG).show();
    }
  break;
case SEND_GIFT_CODE:
if (resultCode == GamesActivityResultCodes.RESULT_SEND_REQUEST_FAILED) {
  Toast.makeText(this,"FAILED TO SEND GIFT!",Toast.LENGTH_LONG).show();
}
break;
case SHOW_INBOX:
if (resultCode == Activity.RESULT_OK && data != null) {
handleRequests(Games.Requests.getGameRequestsFromInboxResponse(data));
}
 else {
Log.e(TAG,"Failed to process inbox result: resultCode = " + resultCode + ", data = "+ (data == null ? "null" : "valid"));
}
break;
case RC_SIGN_IN:
Log.d(TAG,"onActivityResult with requestCode == RC_SIGN_IN, responseCode=" + resultCode + ", intent="+ data);
mSignInClicked=false;
mResolvingConnectionFailure=false;
if (resultCode == RESULT_OK) {
mGoogleApiClient.connect();
}
 else {
BaseGameUtils.showActivityResultError(this,requestCode,resultCode,R.string.signin_failure,R.string.signin_other_error);
}
break;
}
super.onActivityResult(requestCode,resultCode,data);
}
