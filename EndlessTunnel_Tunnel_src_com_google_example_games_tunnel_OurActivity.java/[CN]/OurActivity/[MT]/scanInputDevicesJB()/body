{
  Log.d(TAG,"Scanning input devices.");
  android.hardware.input.InputManager inputManager=(android.hardware.input.InputManager)getSystemService(Context.INPUT_SERVICE);
  if (inputManager == null) {
    Log.e(TAG,"Failed to get InputManager even though API is >= 16.");
    return;
  }
  int[] ids=inputManager.getInputDeviceIds();
  Log.d(TAG,"# input devices: " + ids.length);
  boolean hasJoy=false;
  for (  int id : ids) {
    InputDevice dev=inputManager.getInputDevice(id);
    int sources=dev.getSources();
    int c=sources & InputDevice.SOURCE_CLASS_MASK;
    boolean isJoy=(c & InputDevice.SOURCE_CLASS_JOYSTICK) != 0;
    Log.d(TAG,"Input device id=" + id + ", sources="+ sources+ ", joy="+ isJoy);
    hasJoy=hasJoy || isJoy;
  }
  Log.d(TAG,"Reporting JOYSTICK " + (hasJoy ? "PRESENT" : "ABSENT"));
  native_ReportJoystickPresent(hasJoy);
  if (mInputDeviceListener == null) {
    Log.d(TAG,"Installing listener to get notified of input device changes.");
    android.hardware.input.InputManager.InputDeviceListener listener;
    listener=new android.hardware.input.InputManager.InputDeviceListener(){
      @Override public void onInputDeviceAdded(      int deviceId){
        scanInputDevicesJB();
      }
      @Override public void onInputDeviceChanged(      int deviceId){
        scanInputDevicesJB();
      }
      @Override public void onInputDeviceRemoved(      int deviceId){
        scanInputDevicesJB();
      }
    }
;
    mInputDeviceListener=listener;
    inputManager.registerInputDeviceListener(listener,null);
  }
}
