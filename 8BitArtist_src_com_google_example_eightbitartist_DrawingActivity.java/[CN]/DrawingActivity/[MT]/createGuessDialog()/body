{
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  Log.d(TAG,"Guessed..." + mTurnData.guessingTurn.guessedWord);
  if (mTurnData.guessingTurn.guessedWord == mTurnData.guessingTurn.wordIndex) {
    alertDialogBuilder.setTitle("You got it!").setMessage(mTurnData.guessingTurn.words.get(mTurnData.guessingTurn.guessedWord) + " is correct!\n\nWould you like keep playing?");
    getGamesClient().revealAchievement(getResources().getString(R.string.achievement_guessed_correctly));
    getGamesClient().unlockAchievement(getResources().getString(R.string.achievement_guessed_correctly));
  }
 else {
    alertDialogBuilder.setTitle("No!").setMessage(mTurnData.guessingTurn.words.get(mTurnData.guessingTurn.guessedWord) + " is wrong.  The real answer was " + mTurnData.guessingTurn.words.get(mTurnData.guessingTurn.wordIndex)+ "\n\nWould you like to draw next?");
    getGamesClient().unlockAchievement(getResources().getString(R.string.achievement_got_one_wrong));
  }
  if (mMatch.getStatus() == TurnBasedMatch.MATCH_STATUS_COMPLETE) {
    alertDialogBuilder.setCancelable(false).setPositiveButton("Done!",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        quitMatch();
      }
    }
);
    showWarning("Game over.","This game is over, so you can't keep playing.");
  }
 else {
    alertDialogBuilder.setCancelable(false).setPositiveButton("Keep going!",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        mStateManager.transitionState(StateManager.STATE_NEW_TURN_METADATA);
      }
    }
).setNegativeButton("Quit",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        quitMatch();
        askForRematch();
      }
    }
);
  }
  mAlertDialog=alertDialogBuilder.create();
  mAlertDialog.show();
}
