{
  debugLog("onActivityResult: req=" + (requestCode == RC_RESOLVE ? "RC_RESOLVE" : String.valueOf(requestCode)) + ", resp="+ activityResponseCodeToString(responseCode));
  if (requestCode != RC_RESOLVE) {
    debugLog("onActivityResult: request code not meant for us. Ignoring.");
    return;
  }
  mExpectingResolution=false;
  if (mState != STATE_CONNECTING) {
    debugLog("onActivityResult: ignoring because state isn't STATE_CONNECTING (" + "it's " + STATE_NAMES[mState] + ")");
    return;
  }
  if (responseCode == Activity.RESULT_OK) {
    debugLog("onAR: Resolution was RESULT_OK, so connecting current client again.");
    connectCurrentClient();
  }
 else   if (responseCode == GamesActivityResultCodes.RESULT_RECONNECT_REQUIRED) {
    debugLog("onAR: Resolution was RECONNECT_REQUIRED, so reconnecting.");
    connectCurrentClient();
  }
 else   if (responseCode == Activity.RESULT_CANCELED) {
    debugLog("onAR: Got a cancellation result, so disconnecting.");
    mAutoSignIn=false;
    mUserInitiatedSignIn=false;
    mSignInFailureReason=null;
    killConnections();
    notifyListener(false);
  }
 else {
    debugLog("onAR: responseCode=" + activityResponseCodeToString(responseCode) + ", so giving up.");
    giveUp(new SignInFailureReason(mConnectionResult.getErrorCode(),responseCode));
  }
}
