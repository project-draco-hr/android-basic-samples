{
  Snapshot mResolvedSnapshot=null;
  retryCount++;
  int status=result.getStatus().getStatusCode();
  Log.i(TAG,"Save Result status: " + status);
  if (status == GamesStatusCodes.STATUS_OK) {
    return result.getSnapshot();
  }
 else   if (status == GamesStatusCodes.STATUS_SNAPSHOT_CONTENTS_UNAVAILABLE) {
    return result.getSnapshot();
  }
 else   if (status == GamesStatusCodes.STATUS_SNAPSHOT_CONFLICT) {
    Snapshot snapshot=result.getSnapshot();
    Snapshot conflictSnapshot=result.getConflictingSnapshot();
    mResolvedSnapshot=snapshot;
    if (snapshot.getMetadata().getLastModifiedTimestamp() < conflictSnapshot.getMetadata().getLastModifiedTimestamp()) {
      mResolvedSnapshot=conflictSnapshot;
    }
    Snapshots.OpenSnapshotResult resolveResult=Games.Snapshots.resolveConflict(getApiClient(),result.getConflictId(),mResolvedSnapshot).await();
    if (retryCount < MAX_SNAPSHOT_RESOLVE_RETRIES) {
      return processSnapshotOpenResult(resolveResult,retryCount);
    }
 else {
      String message="Could not resolve snapshot conflicts";
      Log.e(TAG,message);
      Toast.makeText(getBaseContext(),message,Toast.LENGTH_LONG);
    }
  }
  return null;
}
