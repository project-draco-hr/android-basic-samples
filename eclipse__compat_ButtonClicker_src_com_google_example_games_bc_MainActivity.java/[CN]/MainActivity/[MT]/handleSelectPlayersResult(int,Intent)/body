{
  if (response != Activity.RESULT_OK) {
    Log.w(TAG,"*** select players UI cancelled, " + response);
    switchToMainScreen();
    return;
  }
  Log.d(TAG,"Select players UI succeeded.");
  final ArrayList<String> invitees=data.getStringArrayListExtra(GamesClient.EXTRA_PLAYERS);
  Log.d(TAG,"Invitee count: " + invitees.size());
  Bundle autoMatchCriteria=null;
  int minAutoMatchPlayers=data.getIntExtra(GamesClient.EXTRA_MIN_AUTOMATCH_PLAYERS,0);
  int maxAutoMatchPlayers=data.getIntExtra(GamesClient.EXTRA_MAX_AUTOMATCH_PLAYERS,0);
  if (minAutoMatchPlayers > 0 || maxAutoMatchPlayers > 0) {
    autoMatchCriteria=RoomConfig.createAutoMatchCriteria(minAutoMatchPlayers,maxAutoMatchPlayers,0);
    Log.d(TAG,"Automatch criteria: " + autoMatchCriteria);
  }
  Log.d(TAG,"Creating room...");
  RoomConfig.Builder rtmConfigBuilder=RoomConfig.builder(this);
  rtmConfigBuilder.addPlayersToInvite(invitees);
  rtmConfigBuilder.setMessageReceivedListener(this);
  rtmConfigBuilder.setRoomStatusUpdateListener(this);
  if (autoMatchCriteria != null) {
    rtmConfigBuilder.setAutoMatchCriteria(autoMatchCriteria);
  }
  switchToScreen(R.id.screen_wait);
  keepScreenOn();
  resetGameVars();
  getGamesClient().createRoom(rtmConfigBuilder.build());
  Log.d(TAG,"Room created, waiting for it to be ready...");
}
