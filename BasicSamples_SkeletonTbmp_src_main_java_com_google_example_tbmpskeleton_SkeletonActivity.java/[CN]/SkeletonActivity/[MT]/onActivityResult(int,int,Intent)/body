{
  super.onActivityResult(request,response,data);
  if (request == RC_SIGN_IN) {
    mSignInClicked=false;
    mResolvingConnectionFailure=false;
    if (response == Activity.RESULT_OK) {
      mGoogleApiClient.connect();
    }
 else {
      BaseGameUtils.showActivityResultError(this,request,response,R.string.signin_failure,R.string.signin_other_error);
    }
  }
 else   if (request == RC_LOOK_AT_MATCHES) {
    if (response != Activity.RESULT_OK) {
      return;
    }
    TurnBasedMatch match=data.getParcelableExtra(Multiplayer.EXTRA_TURN_BASED_MATCH);
    if (match != null) {
      updateMatch(match);
    }
    Log.d(TAG,"Match = " + match);
  }
 else   if (request == RC_SELECT_PLAYERS) {
    if (response != Activity.RESULT_OK) {
      return;
    }
    final ArrayList<String> invitees=data.getStringArrayListExtra(Games.EXTRA_PLAYER_IDS);
    Bundle autoMatchCriteria=null;
    int minAutoMatchPlayers=data.getIntExtra(Multiplayer.EXTRA_MIN_AUTOMATCH_PLAYERS,0);
    int maxAutoMatchPlayers=data.getIntExtra(Multiplayer.EXTRA_MAX_AUTOMATCH_PLAYERS,0);
    if (minAutoMatchPlayers > 0) {
      autoMatchCriteria=RoomConfig.createAutoMatchCriteria(minAutoMatchPlayers,maxAutoMatchPlayers,0);
    }
 else {
      autoMatchCriteria=null;
    }
    TurnBasedMatchConfig tbmc=TurnBasedMatchConfig.builder().addInvitedPlayers(invitees).setAutoMatchCriteria(autoMatchCriteria).build();
    Games.TurnBasedMultiplayer.createMatch(mGoogleApiClient,tbmc).setResultCallback(new ResultCallback<TurnBasedMultiplayer.InitiateMatchResult>(){
      @Override public void onResult(      TurnBasedMultiplayer.InitiateMatchResult result){
        processResult(result);
      }
    }
);
    showSpinner();
  }
}
